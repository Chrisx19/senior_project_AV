// Generated by gencpp from file av_senior/Arduino_telemetry.msg
// DO NOT EDIT!


#ifndef AV_SENIOR_MESSAGE_ARDUINO_TELEMETRY_H
#define AV_SENIOR_MESSAGE_ARDUINO_TELEMETRY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace av_senior
{
template <class ContainerAllocator>
struct Arduino_telemetry_
{
  typedef Arduino_telemetry_<ContainerAllocator> Type;

  Arduino_telemetry_()
    : Right_Distance(0)
    , Mid_Distance(0)
    , Left_Distance(0)  {
    }
  Arduino_telemetry_(const ContainerAllocator& _alloc)
    : Right_Distance(0)
    , Mid_Distance(0)
    , Left_Distance(0)  {
  (void)_alloc;
    }



   typedef int16_t _Right_Distance_type;
  _Right_Distance_type Right_Distance;

   typedef int16_t _Mid_Distance_type;
  _Mid_Distance_type Mid_Distance;

   typedef int16_t _Left_Distance_type;
  _Left_Distance_type Left_Distance;





  typedef boost::shared_ptr< ::av_senior::Arduino_telemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_senior::Arduino_telemetry_<ContainerAllocator> const> ConstPtr;

}; // struct Arduino_telemetry_

typedef ::av_senior::Arduino_telemetry_<std::allocator<void> > Arduino_telemetry;

typedef boost::shared_ptr< ::av_senior::Arduino_telemetry > Arduino_telemetryPtr;
typedef boost::shared_ptr< ::av_senior::Arduino_telemetry const> Arduino_telemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_senior::Arduino_telemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_senior::Arduino_telemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::av_senior::Arduino_telemetry_<ContainerAllocator1> & lhs, const ::av_senior::Arduino_telemetry_<ContainerAllocator2> & rhs)
{
  return lhs.Right_Distance == rhs.Right_Distance &&
    lhs.Mid_Distance == rhs.Mid_Distance &&
    lhs.Left_Distance == rhs.Left_Distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::av_senior::Arduino_telemetry_<ContainerAllocator1> & lhs, const ::av_senior::Arduino_telemetry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace av_senior

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::av_senior::Arduino_telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_senior::Arduino_telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_senior::Arduino_telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_senior::Arduino_telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_senior::Arduino_telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_senior::Arduino_telemetry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_senior::Arduino_telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6abe48c358f1e845717a29449a49bcb";
  }

  static const char* value(const ::av_senior::Arduino_telemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6abe48c358f1e84ULL;
  static const uint64_t static_value2 = 0x5717a29449a49bcbULL;
};

template<class ContainerAllocator>
struct DataType< ::av_senior::Arduino_telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_senior/Arduino_telemetry";
  }

  static const char* value(const ::av_senior::Arduino_telemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_senior::Arduino_telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 Right_Distance\n"
"int16 Mid_Distance\n"
"int16 Left_Distance\n"
;
  }

  static const char* value(const ::av_senior::Arduino_telemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_senior::Arduino_telemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Right_Distance);
      stream.next(m.Mid_Distance);
      stream.next(m.Left_Distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Arduino_telemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_senior::Arduino_telemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_senior::Arduino_telemetry_<ContainerAllocator>& v)
  {
    s << indent << "Right_Distance: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Right_Distance);
    s << indent << "Mid_Distance: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Mid_Distance);
    s << indent << "Left_Distance: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Left_Distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_SENIOR_MESSAGE_ARDUINO_TELEMETRY_H
